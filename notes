/* // Stack trace operations
	// Get the name of the method that called the current method
	Thread.currentThread().getStackTrace()[2].getMethodName();	// The first element will be "getMethodName", the second is the current method, the third is the previous and so on

	// Get the line number from which the method was called
	return Thread.currentThread().getStackTrace()[2].getLineNumber();

	// Return the stack trace array
	return Thread.currentThread().getStackTrace();

	// If a method10 is called via bunny hopping through method1, return the amount of methods that were called inbetween, including methods 1 and 10
	int stackTraceLength = method1().length - method10().length + 1;

	// Method and class name example
	public static void log(String s) {
        	System.out.println(Thread.currentThread().getStackTrace()[2].getClassName() + ": "
        	    + Thread.currentThread().getStackTrace()[2].getMethodName() + ": "
        	    + s);
    	}
*/

/* // Catch multiple exceptions like this
	try {
		// I solemnly swear that I'm up to no good
	}
	catch (NullPointerException ex) {
		// Do whatever you want to do when a null pointer was encountered
	}
	catch (ArithmeticException ex) {
		// Just don't divide by 0 4Head
	}
	catch (Exception ex) {
		// Last ditch effort to catch any exceptions that weren't caught by the previous catches
	}
*/

/* // You can choose not to catch an exception, but rather throw it like so
	public static void doStuff() throws FileNotFoundException, ClassNotFoundException {}	// If you've included code to read from a file, this method will throw a FileNotFoundException if it's absent
	// You HAVE to try-catch a call to this method in order to compile
*/

/* // Get info from an exception
	try {
            int a = 42 / 0;
        }
        catch (ArithmeticException ex) {
            System.out.println(ex.getMessage());
            System.out.println(ex.getClass().getCanonicalName());
        }
*/

/* // Check which class an object is an instance of, useful with eg exceptions but also in mixed object arrays
	if (exception instanceof RuntimeException) {
		RuntimeException e = (RuntimeException) exception;
		System.out.println(e.getMessage());
	}
*/