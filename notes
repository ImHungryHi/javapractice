// This is a collection of things to sort

/*
	try {
            int a = 42 / 0;
        }
        catch (ArithmeticException ex) {
            System.out.println(ex.getMessage());
            System.out.println(ex.getClass().getCanonicalName());
        }

	try {
            String s = null;
            String m = s.toLowerCase();

	    // THIS ALSO THROWS NULLPOINTEREXCEPTIONS
	    HashMap<String, String> map = new HashMap<String, String>(null);
            map.put(null, null);
            map.remove(null);
        }
        catch (NullPointerException ex) {
            System.out.println(ex.getClass().getCanonicalName());
        }

	try {
            int[] m = new int[2];
            m[8] = 5;
        }
        catch (ArrayIndexOutOfBoundsException ex) {
            System.out.println(ex.getClass().getCanonicalName());
        }

	try {
            ArrayList<String> list = new ArrayList<String>();
            String s = list.get(18);
        }
        catch (IndexOutOfBoundsException ex) {
            System.out.println(ex.getClass().getCanonicalName());
        }

	try {
            int num = Integer.parseInt("XYZ");
            System.out.println(num);
        }
        catch (NumberFormatException ex) {
            System.out.println(ex.getClass().getCanonicalName());
        }

	// Checked vs unchecked exceptions (checked at compile time) - first 2 are examples of the former
	static class MyException extends IOException {}
	static class MyException2 extends SQLException {}
	static class MyException3 extends NullPointerException {}
	static class MyException4 extends ArithmeticException {}

	// Grouping and inheriting exception classes; when exceptions inherit one another, catch them
	// from the lowest level all the way up to the root.
	// Eg: Exception3 inherits from Exception2, Exception2 from 1, 1 from Exception, catch in this order
	public class Solution {
	    public static void main(String[] args) throws Exception {
        	try {
	            method1();
        	}
	        catch(Exception3 ex) {
        	    //
	        }
        	catch(Exception2 ex) {
	            //
        	}
	        catch(Exception1 ex) {
        	    //
	        }
    	    }

	    public static void method1() throws Exception1, Exception2, Exception3 {
	        int i = (int) (Math.random() * 3);
	        if (i == 0)
	            throw new Exception1();
	        if (i == 1)
	            throw new Exception2();
	        if (i == 2)
	            throw new Exception3();
	    }
	}

	class Exception1 extends Exception {}
	class Exception2 extends Exception1 {}
	class Exception3 extends Exception2 {}

	// ++++++++++++++++++++++++++++++++++++ //
	// Catch, log, rethrow and catch again to log

	public static StatelessBean BEAN = new StatelessBean();

	    public static void main(String[] args) {
	        try {
	            handleExceptions();
	        }
	        catch (FileSystemException ex) {
	            BEAN.log(ex);
	        }
	    }

	    public static void handleExceptions() throws FileSystemException {
	        try {
	            BEAN.throwExceptions();
	        }
	        catch (FileSystemException ex) {
	            BEAN.log(ex);
	            throw ex;
	        }
	        catch (CharConversionException ex) {
	            BEAN.log(ex);
	        }
	        catch (IOException ex) {
	            BEAN.log(ex);
	        }
	    }

	    public static class StatelessBean {
	        public void log(Exception exception) {
	            System.out.println(exception.getMessage() + ", " + exception.getClass().getSimpleName());
	        }

	        public void throwExceptions() throws CharConversionException, FileSystemException, IOException {
	            int i = (int) (Math.random() * 3);
	            if (i == 0)
	                throw new CharConversionException();
	            if (i == 1)
	                throw new FileSystemException("");
	            if (i == 2)
	                throw new IOException();
	        }
	    }

	// ++++++++++++++++++++++++++++++++++ //
*/
